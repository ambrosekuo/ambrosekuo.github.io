{"version":3,"sources":["assets/AmbroseKuoResume.pdf","assets/Resume.png","ProjectPanel.js","ProjectsInformation.js","ProjectDescription.js","AboutMe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ProjectPanel","_ref","projectInformation","_useState","useState","titleColor","panelColors","backgroundColor","_useState2","Object","slicedToArray","componentColors","toolsUsed","map","tool","i","tools","react_default","a","createElement","key","length","websiteLink","siteLink","className","href","style","background","color","name","src","imageLinks","alt","description","githubLink","allProjects","projectsTodo","projectName","todo","priority","ProjectTasks","projectTodo","projectNumber","listOfProjectTodo","task","tasks","ProjectDescription","_ref2","toggleExpand","isDescriptionExpanded","setDescriptionExpand","project","ProjectDescription_ProjectTasks","onClick","AboutMe","SiteLinks","react_router_dom","to","src_ProjectDescription_0","newBool","ExternalLinks","Home","src_AboutMe","Resume","resumePDF","require","window","open","Projects","_useState5","_useState6","pageCount","setCount","ProjectPanels","projects","src_ProjectPanel","App","posed","div","visible","x","hidden","setVisible","visibility","App_SiteLinks","App_ExternalLinks","react_router","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3db6398.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AmbroseKuoResume.76a8fbcb.pdf\";","module.exports = __webpack_public_path__ + \"static/media/Resume.ddb89f62.png\";","import React, { useState, useEffect } from \"react\";\r\nimport \"./ProjectPanel.css\";\r\nimport * as Vibrant from \"node-vibrant\";\r\n\r\nfunction ProjectPanel({ projectInformation }) {\r\n  //const [projectName, setName] = useState(projectName);\r\n\r\n  // Initializes componentColors\r\n  const [componentColors, setColor] = useState({\r\n    titleColor: \"black\",\r\n    panelColors: \"white\",\r\n    backgroundColor: \"#white\"\r\n  });\r\n\r\n  // Using Vibrant.js to extract image color and setting the colors of the project component\r\n  const setProjectColors = () => {\r\n    Vibrant.from(projectInformation.imageLinks[0])\r\n      .getPalette()\r\n      .then(palette => {\r\n        // Use destruction operator ... because we want to get a copy, not overwrite the original\r\n        setColor({\r\n          ...componentColors,\r\n          titleColor: RGBarrToRGBA(...palette.DarkVibrant.getRgb(), 1),\r\n          panelColors: RGBarrToRGBA(...palette.LightMuted.getRgb(), 0.4),\r\n          backgroundColor: RGBarrToRGBA(...palette.LightVibrant.getRgb(), 0.4)\r\n        });\r\n      });\r\n  };\r\n\r\n  // Takes in 3 values corresponding to rgb inputs and outputs an rgba with desired transparency (4th input) between 0 and 1\r\n  const RGBarrToRGBA = (r, g, b, transparency) => {\r\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + transparency + \")\";\r\n  };\r\n\r\n  let toolsUsed = projectInformation.toolsUsed.map((tool, i, tools) => {\r\n    return (\r\n      <span key={\"toolUsed\" + i}>\r\n        {\" \"}\r\n        {tool + (i < tools.length - 1 ? \", \" : \".\")}{\" \"}\r\n      </span>\r\n    );\r\n  });\r\n  let websiteLink =\r\n    projectInformation.siteLink !== \"\" ? (\r\n      <a className=\"Site-Link\" href={projectInformation.siteLink}>\r\n        {\" \"}\r\n        To Site{\" \"}\r\n      </a>\r\n    ) : (\r\n      <div className=\"Site-Link\" style={{ background: \"grey\" }}>\r\n        {\" \"}\r\n        Site not hosted\r\n      </div>\r\n    );\r\n  return (\r\n    <div\r\n      className=\"ProjectPanel\"\r\n      style={{ backgroundColor: componentColors.backgroundColor }}\r\n    >\r\n      <h3\r\n        className=\"Project-Title\"\r\n        style={{ color: componentColors.titleColor }}\r\n      >\r\n        {projectInformation.name}\r\n      </h3>\r\n      <div className=\"Project-Image\">\r\n        <div className=\"helper-to-center\"> </div>\r\n        <img\r\n          src={projectInformation.imageLinks[0]}\r\n          alt={projectInformation.name}\r\n        />\r\n      </div>\r\n      <div\r\n        className=\"Tools-Used\"\r\n        style={{ backgroundColor: componentColors.panelColors }}\r\n      >\r\n        {\" \"}\r\n        <span> Made with: </span> {toolsUsed}\r\n      </div>\r\n      <div\r\n        className=\"ProjectPanel-Description\"\r\n        style={{ backgroundColor: componentColors.panelColors }}\r\n      >\r\n        {\" \"}\r\n        {projectInformation.description}{\" \"}\r\n      </div>\r\n      <div className=\"Site-Links\">\r\n        {websiteLink}\r\n        <a className=\"Github-Link\" href={projectInformation.githubLink}>\r\n          {\" \"}\r\n          Github{\" \"}\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProjectPanel;\r\n","// **********************\r\n// Purpose of this module is to just store text/links for the site\r\n// Could also store as a JSON file or set up a database, but currently it is much simpler to just\r\n//  change data here to insert it onto the site\r\n\r\n/*\r\nTODO/Ideas:\r\n-Add an inputting option, maybe admin setting on the site where I can just insert it directly. But this will require database.\r\n\r\n*/\r\n\r\n/*\r\n Project Structure/future schema:\r\n \r\n project = {\r\n    name: \"\",\r\n    description: \"\",\r\n    imageLinks: [],\r\n  }\r\n\r\n*/\r\n\r\nlet allProjects = [\r\n  {\r\n    name: \"Type Talk\",\r\n    toolsUsed: [\"React.js\", \"Socket.io\"],\r\n    description:\r\n      \"This Chat Web Application was created using primarily Javascript, using the React.js library and the runtime environment Node.js to create a server that can interact with clients. React.js is used in conjunction with HTML and CSS to create the visual layer that the client will see when interacting with the website. \",\r\n    imageLinks: [\"/assets/ChatServer0.png\"],\r\n    siteLink: \"http://typetalk.herokuapp.com/\",\r\n    githubLink: \"https://github.com/ambrosekuo/MultiChatServer\"\r\n  },\r\n  {\r\n    name: \"World Explorer\",\r\n    toolsUsed: [\"Phaser3.js\", \"Socket.io\"],\r\n    description:\r\n      \"Multiplayer Platformer that was created using sockets and also has a login/logout system to save progress. Goal of making a platformer that encapsulates all the features I like from games like Maplestory and Mario.\",\r\n    imageLinks: [\r\n      \"/assets/MultiplayerGame0.png\",\r\n      \"/assets/MultiplayerGame1.png\"\r\n    ],\r\n    siteLink: \"https://aks-world-explorer.herokuapp.com/\",\r\n    githubLink: \"https://github.com/ambrosekuo/world-explorer-multiplayer\"\r\n  },\r\n  {\r\n    name: \"OTC Recommendation Web App\",\r\n    toolsUsed: [\"React.js\", \"Node.js\", \"string_score\", \"stream\"],\r\n    description:\r\n      \"Drug Recommendation site made with a UofT Pharmacology student. They compile an excel sheet through research and academic knowledge. The excel sheet links symptoms to drugs and this web app displays it as an interactive site. Also includes a search function.\",\r\n    imageLinks: [\"/assets/DrugRecommendation0.png\"],\r\n    siteLink: \"http://drug-recommendation.herokuapp.com/\",\r\n    githubLink: \"https://github.com/ambrosekuo/drugRecommendation\"\r\n  }\r\n];\r\n\r\n// Priority rating: big issue (red) , medium issue (yellow), suggestion (green)\r\nlet projectsTodo = [\r\n  {\r\n    projectName: \"World Explorer 2D\",\r\n    todo: [\r\n      {\r\n        description:\r\n          \"Core syncing issue where only those that joined earlier can see new players. Sockets not being broadcasted properly?\",\r\n        priority: \"red\"\r\n      },\r\n      {\r\n        description:\r\n          \"Fix ability to switch rooms (have servers, change to a new map)\",\r\n        priority: \"orange\"\r\n      },\r\n      {\r\n        description: \"Implement a chatbox, use concepts from TypeTalk\",\r\n        priority: \"green\"\r\n      },\r\n      {\r\n        description:\r\n          \"Create an inventory to hold items and finish the structure for equipping/de-equipping items\",\r\n        priority: \"green\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    projectName: \"TypeTalk\",\r\n    todo: [\r\n      {\r\n        description:\r\n          \"add ability to make own chat room and message people privately\",\r\n        priority: \"green\"\r\n      },\r\n      {\r\n        description: \"Improve UI of the chatroom, so it is more intuitive\",\r\n        priority: \"green\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    projectName: \"OTC Recommendation\",\r\n    todo: [\r\n      {\r\n        description: \"Create a database to save the excel spreadsheet into.\",\r\n        priority: \"green\"\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport { allProjects, projectsTodo };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./ProjectDescription.css\";\r\n\r\nconst ProjectTasks = ({ projectTodo, projectNumber, projectName }) => {\r\n  const listOfProjectTodo = projectTodo.map((task, i, tasks) => {\r\n    return (\r\n      <li key={projectName + i}>\r\n        <div style={{ color: task.priority }}> {task.description}</div>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <li key={\"project\" + projectNumber}>\r\n      <ul>{listOfProjectTodo}</ul>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst ProjectDescription = ({ toggleExpand, allProjects }) => {\r\n  const [isDescriptionExpanded, setDescriptionExpand] = useState(false);\r\n\r\n  let tasks;\r\n  if (isDescriptionExpanded) {\r\n    tasks = allProjects.map((project, i, allProjects) => (\r\n      <ul>\r\n        <h2> {project.projectName}</h2>\r\n        <ProjectTasks\r\n          projectTodo={project.todo}\r\n          projectNumber={i}\r\n          projectName={project.projectName}\r\n        ></ProjectTasks>\r\n      </ul>\r\n    ));\r\n  } else {\r\n    tasks =\r\n      allProjects.length >= 1 ? (\r\n        <ul>\r\n          <h2> {allProjects[0].projectName}</h2>\r\n          <ProjectTasks\r\n            projectTodo={allProjects[0].todo}\r\n            projectNumber={0}\r\n          ></ProjectTasks>\r\n        </ul>\r\n      ) : (\r\n        \"\"\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className=\"Project-Description\">\r\n      <div className=\"Project-Description-Header\">\r\n        <h2> Current Ideas and Issues </h2>\r\n      </div>\r\n      <h3>\r\n        {\" \"}\r\n        <span style={{ color: \"red\" }}> Priority Issue </span> ,\r\n        <span style={{ color: \"orange\" }}> Medium level issue </span> ,\r\n        <span style={{ color: \"green\" }}> Additional Implementations </span>{\" \"}\r\n      </h3>\r\n      {tasks}\r\n      <button\r\n        className=\"Toggle-Current-Ideas\"\r\n        onClick={() => {\r\n          setDescriptionExpand(!isDescriptionExpanded);\r\n          toggleExpand(isDescriptionExpanded);\r\n        }}\r\n      >\r\n        {isDescriptionExpanded ? \"Show less ⬆\" : \"Show more ⬇\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectDescription;\r\n","import React from \"react\";\r\nimport \"./AboutMe.css\";\r\n\r\nfunction AboutMe() {\r\n  return (\r\n    <div className=\"About-Me\">\r\n      <div className=\"About-Me-Container\">\r\n        <img src=\"/assets/me.jpg\" alt=\"Me\" />\r\n        <div className=\"About-Me-Description\">\r\n          <h1> ABOUT ME</h1>\r\n          <p>\r\n            Hello! I'm Ambrose Kuo, a 3rd year Computer Science student at\r\n            Ryerson University. These are some projects I'm working on!{\" \"}\r\n          </p>\r\n          <p> \r\n            This site was build entirely from scratch with vanilla CSS and React.js!\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AboutMe;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport ProjectPanel from \"./ProjectPanel.js\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport { allProjects, projectsTodo } from \"./ProjectsInformation.js\";\r\nimport ProjectDescription from \"./ProjectDescription.js\";\r\nimport AboutMe from \"./AboutMe.js\";\r\nimport posed from \"react-pose\";\r\nimport { Animated } from \"react-animated-css\";\r\n\r\n// import {useRoutes} from 'hookrouter';\r\n\r\nfunction App() {\r\n  //const Hamburger = posed.div({left: {x:-100}, right: {x:100}});\r\n  const Hamburger = posed.div({\r\n    visible: { x: 50 },\r\n    hidden: { x: -50 }\r\n  });\r\n  //const HamburgerComponent = ({position}) => <Hamburger pose={position} />\r\n\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <header className=\"App-header\">\r\n          <div className=\"App-header-title\">\r\n            <div\r\n              className=\"Button-Container-Mobile\"\r\n              onClick={() => {\r\n                setVisible(!visible);\r\n              }}\r\n            >\r\n              <div className=\"Hamburger\" />\r\n              <div className=\"Hamburger\" />\r\n              <div className=\"Hamburger\" />\r\n              <div\r\n                style={{ visibility: visible ? \"visible\" : \"hidden\" }}\r\n                className=\"Mobile-Dropdown\"\r\n              >\r\n                <SiteLinks />\r\n              </div>\r\n            </div>\r\n            <h1> Ambrose's Projects </h1>\r\n            <div className=\"Button-Container\">\r\n              <SiteLinks />\r\n            </div>\r\n            <ExternalLinks />\r\n          </div>\r\n          <div className=\"Content-Panel\">\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route path=\"/projects\" component={Projects} />\r\n            <Route path=\"/resume\" component={Resume} />\r\n            <Route path=\"/todo\" component={todo} />\r\n          </div>\r\n        </header>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SiteLinks = () => {\r\n  return (\r\n    <div className=\"Site-Links\">\r\n        <Link className=\"link\" to=\"/\">\r\n          H O M E\r\n        </Link>\r\n        <Link className=\"link\" to=\"/projects\">\r\n          {\" \"}\r\n          P R O J E C T S{\" \"}\r\n        </Link>\r\n        <Link className=\"link\" to=\"/resume\">\r\n          {\" \"}\r\n          R E S U M E{\" \"}\r\n        </Link>\r\n        <Link className=\"link\" to=\"/todo\">\r\n          {\" \"}\r\n          T O D O{\" \"}\r\n        </Link>\r\n        </div>\r\n  );\r\n};\r\n\r\nconst todo = () => {\r\n  let descToggle = false;\r\n  const toggleExpand = newBool => {\r\n    descToggle = newBool;\r\n  };\r\n  return (\r\n    <ProjectDescription allProjects={projectsTodo} toggleExpand={toggleExpand}>\r\n      {\" \"}\r\n    </ProjectDescription>\r\n  );\r\n};\r\n\r\nfunction AnimatedHamburgerAnimation({ visible, children }) {\r\n  const [isVisible, setVisiblity] = useState(!visible);\r\n  useEffect(() => {\r\n    if (!visible) {\r\n      setTimeout(() => setVisiblity(true), 1000);\r\n    } else setVisiblity(false);\r\n  }, [visible]);\r\n\r\n  const style = isVisible ? { display: \"none\" } : null;\r\n  return (\r\n    <Animated\r\n      animationIn=\"zoomIn\"\r\n      animationOut=\"zoomOut\"\r\n      isVisible={visible}\r\n      style={style}\r\n    >\r\n      {children}\r\n    </Animated>\r\n  );\r\n}\r\n\r\nconst ExternalLinks = () => {\r\n  return (\r\n    <div className=\"External-Links\">\r\n      <a href=\"https://github.com/ambrosekuo\"> Github</a>\r\n      <a href=\"https://www.linkedin.com/in/ambrose-kuo-832147113/\"> Linkedln</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Home = () => {\r\n  return <AboutMe />;\r\n};\r\n\r\nconst Resume = () => {\r\n  //return <Resume />;\r\n\r\n  return (\r\n    <div className=\"Resume\">\r\n      <div className=\"Resume-Link\">\r\n        {\" \"}\r\n        <button\r\n          onClick={() => {\r\n            // Building URL\r\n            const resumePDF = require(\"./assets/AmbroseKuoResume.pdf\");\r\n            window.open(resumePDF);\r\n          }}\r\n        >\r\n          {\" \"}\r\n          View as PDF\r\n        </button>{\" \"}\r\n      </div>\r\n      <img src={require(\"./assets/Resume.png\")} alt=\"resume\" />\r\n    </div>\r\n  ); //\r\n};\r\n\r\nconst Projects = () => {\r\n  const [pageCount, setCount] = useState(0);\r\n\r\n  let ProjectPanels = allProjects.map((project, i, projects) => {\r\n    return (\r\n      <ProjectPanel projectInformation={project} key={i}>\r\n        {\" \"}\r\n      </ProjectPanel>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"Favourite-Projects\">\r\n      <h1> Current Projects </h1>\r\n      {ProjectPanels[pageCount]}\r\n      <div className=\"Page-Buttons\">\r\n        <span>\r\n          {\" \"}\r\n          Project: {pageCount + 1} of {allProjects.length}\r\n        </span>\r\n        <button\r\n          className=\"Page-Button\"\r\n          onClick={() => {\r\n            if (pageCount > 0) {\r\n              setCount(pageCount - 1);\r\n            }\r\n          }}\r\n        >\r\n          {\" \"}\r\n          &lt;={\" \"}\r\n        </button>\r\n        <button\r\n          className=\"Page-Button\"\r\n          onClick={() => {\r\n            if (pageCount < allProjects.length - 1) {\r\n              setCount(pageCount + 1);\r\n            }\r\n          }}\r\n        >\r\n          {\" \"}\r\n          =>{\" \"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}