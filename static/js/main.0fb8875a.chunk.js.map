{"version":3,"sources":["ProjectPanel.js","ProjectsInformation.js","AboutMe.js","App.js","serviceWorker.js","index.js"],"names":["ProjectPanel","_ref","projectInformation","_useState","useState","titleColor","panelColors","backgroundColor","_useState2","Object","slicedToArray","componentColors","setColor","useEffect","setProjectColors","Vibrant","imageLinks","getPalette","then","palette","console","log","DarkVibrant","getRgb","objectSpread","RGBarrToRGBA","apply","toConsumableArray","concat","LightMuted","LightVibrant","r","g","b","transparency","toolsUsed","map","tool","i","tools","react_default","a","createElement","key","length","websiteLink","siteLink","className","href","style","background","color","name","src","alt","description","githubLink","allProjects","AboutMe","App","ProjectPanels","project","projects","src_ProjectPanel","src_AboutMe","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fb8875a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./ProjectPanel.css\";\r\nimport * as Vibrant from \"node-vibrant\";\r\n\r\nfunction ProjectPanel({ projectInformation }) {\r\n  //const [projectName, setName] = useState(projectName);\r\n\r\n  // Initializes componentColors\r\n  const [componentColors, setColor] = useState({\r\n    titleColor: \"black\",\r\n    panelColors: \"white\",\r\n    backgroundColor: \"#white\"\r\n  });\r\n\r\n  // Not going to change anymore, so doesn't need to be rerun\r\n  useEffect(() => {\r\n    setProjectColors();\r\n  }, []);\r\n\r\n  // Using Vibrant.js to extract image color and setting the colors of the project component\r\n  const setProjectColors = () => {\r\n    Vibrant.from(projectInformation.imageLinks[0])\r\n      .getPalette()\r\n      .then(palette => {\r\n        console.log(palette.DarkVibrant.getRgb());\r\n        // Use destruction operator ... because we want to get a copy, not overwrite the original\r\n        setColor({\r\n          ...componentColors,\r\n          titleColor: RGBarrToRGBA(...palette.DarkVibrant.getRgb(), 1),\r\n          panelColors: RGBarrToRGBA(...palette.LightMuted.getRgb(), 0.4),\r\n          backgroundColor: RGBarrToRGBA(...palette.LightVibrant.getRgb(), 0.4)\r\n        });\r\n      });\r\n  };\r\n\r\n  // Takes in 3 values corresponding to rgb inputs and outputs an rgba with desired transparency (4th input) between 0 and 1\r\n  const RGBarrToRGBA = (r, g, b, transparency) => {\r\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + transparency + \")\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    function nameChange(newName) {\r\n      // setName(newName);\r\n    }\r\n  });\r\n\r\n  let directionToExpandTo;\r\n\r\n  let toolsUsed = projectInformation.toolsUsed.map((tool, i, tools) => {\r\n    return (\r\n      <span key={\"toolUsed\" + i}>\r\n        {\" \"}\r\n        {tool + (i < tools.length - 1 ? \", \" : \".\")}{\" \"}\r\n      </span>\r\n    );\r\n  });\r\n  let websiteLink =\r\n    projectInformation.siteLink != \"\" ? (\r\n      <a className=\"Site-Link\" href={projectInformation.siteLink}>\r\n        {\" \"}\r\n        To Site{\" \"}\r\n      </a>\r\n    ) : (\r\n      <div className=\"Site-Link\" style={{background:\"grey\"}}> Site not hosted</div>\r\n    );\r\n  return (\r\n    <div\r\n      className=\"ProjectPanel\"\r\n      style={{ backgroundColor: componentColors.backgroundColor }}\r\n    >\r\n      <h3\r\n        className=\"Project-Title\"\r\n        style={{ color: componentColors.titleColor }}\r\n      >\r\n        {projectInformation.name}\r\n      </h3>\r\n      <img\r\n        src={projectInformation.imageLinks[0]}\r\n        alt={projectInformation.name}\r\n      />\r\n      <div\r\n        className=\"Tools-Used\"\r\n        style={{ backgroundColor: componentColors.panelColors }}\r\n      >\r\n        {\" \"}\r\n        Made with: {toolsUsed}\r\n      </div>\r\n      <div\r\n        className=\"ProjectPanel-Description\"\r\n        style={{ backgroundColor: componentColors.panelColors }}\r\n      >\r\n        {\" \"}\r\n        {projectInformation.description}{\" \"}\r\n      </div>\r\n      <div className=\"Site-Links\">\r\n        {websiteLink}\r\n        <a className=\"Github-Link\" href={projectInformation.githubLink}>\r\n          {\" \"}\r\n          Github{\" \"}\r\n        </a>\r\n      </div>\r\n      <button className=\"View-Code\"> View Code</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProjectPanel;\r\n","// **********************8\r\n// Purpose of this module is to just store text/links for the site\r\n// Could also store as a JSON file or set up a database, but currently it is much simpler to just\r\n//  change data here to insert it onto the site\r\n\r\n/*\r\nTODO/Ideas:\r\n-Add an inputting option, maybe admin setting on the site where I can just insert it directly. But this will require database.\r\n\r\n*/\r\n\r\n/*\r\n Project Structure/future schema:\r\n \r\n project = {\r\n    name: \"\",\r\n    description: \"\",\r\n    imageLinks: [],\r\n  }\r\n\r\n*/\r\n\r\nlet allProjects = [\r\n  {\r\n    name: \"Chat Server\",\r\n    toolsUsed: [\"React.js\", \"Socket.io\"],\r\n    description: \"Chat Server made with React/Sockets.IO/NodeJs\",\r\n    imageLinks: [\"/assets/ChatServer0.png\"],\r\n    siteLink: \"\",\r\n    githubLink: \"https://github.com/ambrosekuo/MultiChatServer\"\r\n  },\r\n  {\r\n    name: \"Multiplayer Game\",\r\n    toolsUsed: [\"Phaser3.js\", \"Socket.io\"],\r\n    description: \"Multiplayer Platformer that was created using sockets and also has a login/logout system to save progress. Also a simpler working version made without l\",\r\n    imageLinks: [\r\n      \"/assets/MultiplayerGame0.png\",\r\n      \"/assets/MultiplayerGame1.png\"\r\n    ],\r\n    siteLink: \"https://aks-world-explorer.herokuapp.com/\",\r\n    githubLink: \"https://github.com/ambrosekuo/world-explorer-multiplayer\"\r\n  },\r\n  {\r\n    name: \"Drug Recommendation Site\",\r\n    toolsUsed: [\"React.js\", \"Node.js\", \"string_score\", \"stream\"],\r\n    description: \r\n      \"Drug Recommendation site made with a UofT Pharmacology student. They compile an excel sheet through research and academic knowledge. The excel sheet links symptoms to drugs and this web app displays it as an interactive site. Also includes a search function.\",\r\n    imageLinks: [\"/assets/DrugRecommendation0.png\"],\r\n    siteLink: \"http://drug-recommendation.herokuapp.com/\",\r\n    githubLink: \"https://github.com/ambrosekuo/drugRecommendation\"\r\n  }\r\n];\r\n\r\nlet currentIdeas = [\r\n  {\r\n    title: \"Issue: Multiplayer Game desyncing\",\r\n    difficulty: \"Hell\",\r\n    description:\r\n      \"Currently, you can only see the people that joined after you, so it's multiplayer, but not syncing correctly. The code is messy/not modularize and very long since it was a difficult project.\"\r\n  },\r\n  {\r\n    title: \"Todo: Make this Portfolio look better\",\r\n    difficulty: \"???\",\r\n    description: \"Figuring out how to make this site look professional\"\r\n  },{\r\n    title: \"Expanding on: Chat Server\",\r\n    difficulty: \"Medium\",\r\n    description: \"Creating database end and being able to create chat rooms.\"\r\n  },\r\n];\r\n\r\nexport { allProjects, currentIdeas };\r\n","import React from \"react\";\r\nimport \"./AboutMe.css\";\r\n\r\nfunction AboutMe() {\r\n  return (\r\n    <div className=\"About-Me\">\r\n      <div className=\"About-Me-Container\">\r\n        <img src=\"/assets/me.jpg\" alt=\"Me\" />\r\n        <div className=\"About-Me-Description\">\r\n          <h1> ABOUT ME</h1>\r\n          <p>\r\n            Hello! I'm Ambrose Kuo, a 3rd year Computer Science student at\r\n            Ryerson University. These are some projects I'm working on!{\" \"}\r\n          </p>\r\n          <a href=\"https://github.com/ambrosekuo\"> Github</a>\r\n          <a href=\"https://github.com/ambrosekuo\"> Linkedln</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AboutMe;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport ProjectPanel from \"./ProjectPanel.js\";\r\nimport { allProjects, currentIdeas } from \"./ProjectsInformation.js\";\r\nimport ProjectDescription from \"./ProjectDescription.js\";\r\nimport AboutMe from \"./AboutMe.js\";\r\n\r\nfunction App() {\r\n  let descToggle = false;\r\n\r\n  const toggleExpand = newBool => {\r\n    descToggle = newBool;\r\n  };\r\n\r\n  let ProjectPanels = allProjects.map((project, i, projects) => {\r\n    return (\r\n      <ProjectPanel projectInformation={project} key={i}>\r\n        {\" \"}\r\n      </ProjectPanel>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div className=\"App-header-title\">\r\n          <h1> Ambrose's Projects </h1>\r\n          <div className=\"Button-Container\">\r\n            <ul>\r\n              <li> H O M E</li>\r\n              <li> R E S U M E</li>\r\n              <li> A B O U T &nbsp; M E</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <AboutMe />\r\n      </header>\r\n      <div className=\"Favourite-Projects\">\r\n        <h2>⭐ Favourites ⭐</h2>\r\n        {ProjectPanels}\r\n      </div>\r\n      <div className=\"Other-Projects\">\r\n        <h2> Others</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/* TO ADD LATER PROJECT NOTEPAD\r\n\r\n        <ProjectDescription\r\n          currentIdeas={currentIdeas}\r\n          toggleExpand={toggleExpand}\r\n        >\r\n          {\" \"}\r\n        </ProjectDescription>\r\n\r\n        */\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}